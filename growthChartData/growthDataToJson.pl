#!/usr/bin/perl -w

#This script reads the data files under the CDC/ and WHO/ subdirectory and converts their LMS data into JSON. 

#requires Debian package libtext-csv-xs-perl

use strict;
use warnings;

use Data::Dumper;
use JSON;
use Text::CSV_XS;

my %fileInfo = (
    'CDC/bmiagerev.csv' => {'outputKey' => 'cdc_bmi_month_24-240'},
    'CDC/hcageinf.csv' => {'outputKey' => 'cdc_circumference_month_0-36'},
    'CDC/lenageinf.csv' => {'outputKey' => 'cdc_length_month_0-36'},
    'CDC/statage.csv' => {'outputKey' => 'cdc_height_month_24-240'},
    'CDC/wtage.csv' => {'outputKey' => 'cdc_weight_month_24-240'},
    'CDC/wtageinf.csv' => {'outputKey' => 'cdc_weight_month_0-36'},
    'CDC/wtleninf.csv' => {'outputKey' => 'cdc_weight_length_45-103.5',
			   'xColumn' => 'Length'},
    'CDC/wtstat.csv' => {'outputKey' => 'cdc_weight_height_77-121.5',
			 'xColumn' => 'Height'},

    'WHO/bfa_boys_p_exp.txt' => {'outputKey' => 'who_bmi_day_0-1856', 'gender' => 'male',
				 'xColumn' => 'Age', 'separator' => "\t"},
    'WHO/bfa_girls_p_exp.txt' => {'outputKey' => 'who_bmi_day_0-1856', 'gender' => 'female',
				  'xColumn' => 'Age', 'separator' => "\t"},

    'WHO/hcfa_boys_p_exp.txt' => {'outputKey' => 'who_circumference_day_0-1856', 'gender' => 'male',
				  'xColumn' => 'Age', 'separator' => "\t"},
    'WHO/hcfa_girls_p_exp.txt' => {'outputKey' => 'who_circumference_day_0-1856', 'gender' => 'female',
				   'xColumn' => 'Age', 'separator' => "\t"},

    'WHO/lhfa_boys_p_exp.txt' => {'outputKey' => 'who_lengthHeight_day_0-1856',
					 'gender' => 'male',
					 'xColumn' => 'Day', 'separator' => "\t"},
    'WHO/lhfa_girls_p_exp.txt' => {'outputKey' => 'who_lengthHeight_day_0-1856',
					  'gender' => 'female',
					  'xColumn' => 'Day', 'separator' => "\t"},

    'WHO/wfa_boys_p_exp.txt' => {'outputKey' => 'who_weight_day_0-1856', 'gender' => 'male',
				 'xColumn' => 'Age', 'separator' => "\t"},
    'WHO/wfa_girls_p_exp.txt' => {'outputKey' => 'who_weight_day_0-1856', 'gender' => 'female',
				  'xColumn' => 'Age', 'separator' => "\t"},

    'WHO/wfl_boys_p_exp.txt' => {'outputKey' => 'who_weight_length_45-110', 'gender' => 'male',
				 'xColumn' => 'Length', 'separator' => "\t"},
    'WHO/wfl_girls_p_exp.txt' => {'outputKey' => 'who_weight_length_45-110', 'gender' => 'female',
				  'xColumn' => 'Length', 'separator' => "\t"},
    
    'WHO/tab_wfh_boys_p_2_5.txt' => {'outputKey' => 'who_weight_height_65-120', 'gender' => 'male',
				     'xColumn' => 'Height', 'separator' => "\t"},
    'WHO/tab_wfh_girls_p_2_5.txt' => {'outputKey' => 'who_weight_height_65-120', 'gender' => 'female',
				      'xColumn' => 'Height', 'separator' => "\t"},
    );

my %allOutput = ();

while (my ($fileName, $fileInfo) = each(%fileInfo)) {
    my $fileHandle;
    open($fileHandle, '<', $fileName) || die 'Can not open input file.';

    my $separator = defined($fileInfo->{'separator'}) ? $fileInfo->{'separator'} : ',';
    my $csvParser = Text::CSV_XS->new({ binary => 1, sep_char => $separator });
    $csvParser->column_names(@{$csvParser->getline($fileHandle)});
    
    my $output = {'male' => [], 'female' => []};
    if (defined($allOutput{$fileInfo->{'outputKey'}})) {
	$output = $allOutput{$fileInfo->{'outputKey'}};
    }
    
    while (my $rowData = $csvParser->getline_hr($fileHandle)) {
	if (defined($rowData->{'Sex'}) 
	    && $rowData->{'Sex'} eq 'Sex') {
	    #duplicate header in the middle of file so skip
	    next;
	}

	my $gender = 'male';
	if (defined($fileInfo->{'gender'})) {
	    $gender = $fileInfo->{'gender'};
	} elsif ($rowData->{'Sex'} == 2) {
	    $gender = 'female';
	}

	my $xColumn = defined($fileInfo->{'xColumn'}) ? $fileInfo->{'xColumn'} : 'Agemos';
	#my $yLabel = defined($fileInfo->{'yLabel'}) ? $fileInfo->{'yLabel'} : 'month';
	
	push @{$output->{$gender}}, [$rowData->{$xColumn} + 0,
				     $rowData->{'L'} + 0,
				     $rowData->{'M'} + 0,
				     $rowData->{'S'} + 0];
    }

    $allOutput{$fileInfo->{'outputKey'}} = $output;
    
    close $fileHandle;
}

print <<DOC;
/*
This file was generated by growthChartData/growthDataToJson.pl.

It contains median (M), the generalized coefficient of variation (S), and the power in the Box-Cox transformation (L) values for various growth data from the CDC and WHO in JSON format. These values can be used to generate percentile curves and generate the percentile for a given values. An explanation of these values can be found in growthChartData/CDC/percentile_data_files.htm

The output is all stored in one variable called growthChartLmsData. The key names of growthChartLmsData follow this patter.
{data source}_{y-axis}_{x-axis}_{x-axis range}

Here is a complete list of the key names

DOC

my %allKeyNames = ();
map {$allKeyNames{$fileInfo{$_}->{'outputKey'}} = 1} keys(%fileInfo);
print join("\n", sort(keys(%allKeyNames)));

print <<DOC;


Each element in the arrays is an array contain four values. The for values are

1 - x-axis value
2 - L (power in the Box-Cox transformation)
3 - M (median)
4 - S (generalized coefficient of variation)
*/

DOC

my $json = JSON->new();
print 'var growthChartLmsData = ' . $json->encode(\%allOutput) . ";\n";

