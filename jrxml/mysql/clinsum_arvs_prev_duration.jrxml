<?xml version="1.0" encoding="UTF-8"  ?>
<!-- Created with iReport - A designer for JasperReports -->
<!DOCTYPE jasperReport PUBLIC  "//JasperReports//DTD Report Design//EN" "http://jasperreports.sourceforge.net/dtds/jasperreport.dtd">
<jasperReport
		 name="clinsum_arvs_prev_duration"
		 columnCount="1"
		 printOrder="Vertical"
		 orientation="Landscape"
		 pageWidth="40"
		 pageHeight="13"
		 columnWidth="40"
		 columnSpacing="0"
		 leftMargin="0"
		 rightMargin="0"
		 topMargin="0"
		 bottomMargin="0"
		 whenNoDataType="NoPages"
		 isTitleNewPage="false"
		 isSummaryNewPage="false">
	<property name="ireport.scriptlethandling" value="0" />
	<property name="ireport.encoding" value="UTF-8" />
	<import value="java.util.*" />
	<import value="net.sf.jasperreports.engine.*" />
	<import value="net.sf.jasperreports.engine.data.*" />

	<parameter name="pid" isForPrompting="true" class="java.lang.String"/>
	<parameter name="drugID" isForPrompting="true" class="java.lang.Integer"/>
	
  <queryString>select (select (concat(ltrim(rtrim(d . startMm)) , '/01/' , ltrim(rtrim(d . startYy)))) from v_drugs d where d . drugID = $P{drugID} and d . patientID = $P{pid} and d . encounterType in (1 , 16) and (isnumeric(d . startMm) = 1 or upper(ltrim(rtrim(d . startMm))) = 'XX') and (isnumeric(d . startYy) = 1 or upper(ltrim(rtrim(d . startYy))) = 'XX') and isdate(ymdToDate(ifnull(nullif(upper(ltrim(rtrim(d . startYy))) , 'XX') , '25') , ifnull(nullif(upper(ltrim(rtrim(d . startMm))) , 'XX') , '06') , '01')) = 1 order by ymdToDate(ifnull(nullif(upper(ltrim(rtrim(d . startYy))) , 'XX') , '25') , ifnull(nullif(upper(ltrim(rtrim(d . startMm))) , 'XX') , '06') , '01') asc limit 1) as startDt , (select (concat(ltrim(rtrim(d . stopMm)) , '/01/' , ltrim(rtrim(d . stopYy)))) from v_drugs d where d . drugID = $P{drugID} and d . patientID = $P{pid} and d . encounterType in (1 , 16) and (isnumeric(d . stopMm) = 1 or upper(ltrim(rtrim(d . stopMm))) = 'XX' or upper(ltrim(rtrim(d . stopMm))) = 'NN') and (isnumeric(d . stopYy) = 1 or upper(ltrim(rtrim(d . stopYy))) = 'XX' or upper(ltrim(rtrim(d . stopYy))) = 'NN') and isdate(ymdToDate(ifnull(nullif(nullif(upper(ltrim(rtrim(d . stopYy))) , 'NN') , 'XX') , '25') , ifnull(nullif(nullif(upper(ltrim(rtrim(d . stopMm))) , 'NN') , 'XX') , '06') , '01')) = 1 order by ymdToDate(ifnull(nullif(nullif(upper(ltrim(rtrim(d . stopYy))) , 'NN') , 'XX') , '25') , ifnull(nullif(nullif(upper(ltrim(rtrim(d . stopMm))) , 'NN') , 'XX') , '06') , '01') desc limit 1) as stopDt; 
</queryString>

	<field name="startDt" class="java.lang.String"/>
	<field name="stopDt" class="java.lang.String"/>

		<background>
			<band height="0"  isSplitAllowed="true" >
			</band>
		</background>
		<title>
			<band height="0"  isSplitAllowed="true" >
			</band>
		</title>
		<pageHeader>
			<band height="0"  isSplitAllowed="true" >
			</band>
		</pageHeader>
		<columnHeader>
			<band height="0"  isSplitAllowed="true" >
			</band>
		</columnHeader>
		<detail>
			<band height="13"  isSplitAllowed="true" >
				<textField isStretchWithOverflow="false" isBlankWhenNull="true" evaluationTime="Now" hyperlinkType="None"  hyperlinkTarget="Self" >
					<reportElement
						x="4"
						y="0"
						width="32"
						height="13"
						key="textField-1"/>
					<box topBorder="None" topBorderColor="#000000" leftBorder="None" leftBorderColor="#000000" rightBorder="None" rightBorderColor="#000000" bottomBorder="None" bottomBorderColor="#000000"/>
					<textElement textAlignment="Center">
						<font fontName="Lucida Console" pdfFontName="Courier" pdfEncoding ="Cp1252"/>
					</textElement>
				<textFieldExpression   class="java.lang.String"><![CDATA[( $F{startDt}.substring(0, $F{startDt}.indexOf("/")).matches("[\\d]{1,2}") &&
  Integer.parseInt($F{startDt}.substring(0, $F{startDt}.indexOf("/"))) >= 1 &&
  Integer.parseInt($F{startDt}.substring(0, $F{startDt}.indexOf("/"))) <= 12 &&
  $F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1).matches("[\\d]{1,2}") ?
  ( Integer.parseInt( $F{startDt} != null && $F{startDt}.trim().length() > 0 ?
    ( $F{stopDt} != null && $F{stopDt}.trim().length() > 0 &&
	  $F{stopDt}.substring(0, $F{stopDt}.indexOf("/")).matches("[\\d]{1,2}") &&
      Integer.parseInt($F{stopDt}.substring(0, $F{stopDt}.indexOf("/"))) >= 1 &&
      Integer.parseInt($F{stopDt}.substring(0, $F{stopDt}.indexOf("/"))) <= 12 &&
	  $F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1).matches("[\\d]{1,2}") ?
	   Integer.toString(((new GregorianCalendar(
	     ( Integer.parseInt($F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1)) > 15 ?
		   Integer.parseInt($F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1)) + 1900
		   :
		   Integer.parseInt($F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1)) + 2000
		 ),
		 Integer.parseInt($F{stopDt}.substring(0, $F{stopDt}.indexOf("/"))) - 1,
         1).get(Calendar.YEAR) -
         new GregorianCalendar(
	     ( Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) > 15 ?
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 1900
		   :
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 2000
		 ),
		 Integer.parseInt($F{startDt}.substring(0, $F{startDt}.indexOf("/"))) - 1,
         1).get(Calendar.YEAR)) * 12) +
        (new GregorianCalendar(
	     ( Integer.parseInt($F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1)) > 15 ?
		   Integer.parseInt($F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1)) + 1900
		   :
		   Integer.parseInt($F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1)) + 2000
		 ),
		 Integer.parseInt($F{stopDt}.substring(0, $F{stopDt}.indexOf("/"))) - 1,
         1).get(Calendar.MONTH) -
         new GregorianCalendar(
	     ( Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) > 15 ?
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 1900
		   :
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 2000
		 ),
		 Integer.parseInt($F{startDt}.substring(0, $F{startDt}.indexOf("/"))) - 1,
         1).get(Calendar.MONTH)))
        :
        Integer.toString(((new GregorianCalendar().get(Calendar.YEAR) -
         new GregorianCalendar(
	     ( Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) > 15 ?
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 1900
		   :
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 2000
		 ),
		 Integer.parseInt($F{startDt}.substring(0, $F{startDt}.indexOf("/"))) - 1 ,
         1).get(Calendar.YEAR)) * 12) +
        (new GregorianCalendar().get(Calendar.MONTH) -
         new GregorianCalendar(
	     ( Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) > 15 ?
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 1900
		   :
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 2000
		 ),
		 Integer.parseInt($F{startDt}.substring(0, $F{startDt}.indexOf("/"))) - 1,
         1).get(Calendar.MONTH)))
  ) : "0"
) < 0 ? "ERR" :
  ( $F{startDt} != null && $F{startDt}.trim().length() > 0 ?
    ( $F{stopDt} != null && $F{stopDt}.trim().length() > 0 &&
	  $F{stopDt}.substring(0, $F{stopDt}.indexOf("/")).matches("[\\d]{1,2}") &&
      Integer.parseInt($F{stopDt}.substring(0, $F{stopDt}.indexOf("/"))) >= 1 &&
      Integer.parseInt($F{stopDt}.substring(0, $F{stopDt}.indexOf("/"))) <= 12 &&
	  $F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1).matches("[\\d]{1,2}") ?
	   Integer.toString(((new GregorianCalendar(
	     ( Integer.parseInt($F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1)) > 15 ?
		   Integer.parseInt($F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1)) + 1900
		   :
		   Integer.parseInt($F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1)) + 2000
		 ),
		 Integer.parseInt($F{stopDt}.substring(0, $F{stopDt}.indexOf("/"))) - 1,
         1).get(Calendar.YEAR) -
         new GregorianCalendar(
	     ( Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) > 15 ?
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 1900
		   :
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 2000
		 ),
		 Integer.parseInt($F{startDt}.substring(0, $F{startDt}.indexOf("/"))) - 1,
         1).get(Calendar.YEAR)) * 12) +
        (new GregorianCalendar(
	     ( Integer.parseInt($F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1)) > 15 ?
		   Integer.parseInt($F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1)) + 1900
		   :
		   Integer.parseInt($F{stopDt}.substring($F{stopDt}.lastIndexOf("/") + 1)) + 2000
		 ),
		 Integer.parseInt($F{stopDt}.substring(0, $F{stopDt}.indexOf("/"))) - 1,
         1).get(Calendar.MONTH) -
         new GregorianCalendar(
	     ( Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) > 15 ?
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 1900
		   :
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 2000
		 ),
		 Integer.parseInt($F{startDt}.substring(0, $F{startDt}.indexOf("/"))) - 1,
         1).get(Calendar.MONTH)))
        :
        Integer.toString(((new GregorianCalendar().get(Calendar.YEAR) -
         new GregorianCalendar(
	     ( Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) > 15 ?
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 1900
		   :
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 2000
		 ),
		 Integer.parseInt($F{startDt}.substring(0, $F{startDt}.indexOf("/"))) - 1,
         1).get(Calendar.YEAR)) * 12) +
        (new GregorianCalendar().get(Calendar.MONTH) -
         new GregorianCalendar(
	     ( Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) > 15 ?
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 1900
		   :
		   Integer.parseInt($F{startDt}.substring($F{startDt}.lastIndexOf("/") + 1)) + 2000
		 ),
		 Integer.parseInt($F{startDt}.substring(0, $F{startDt}.indexOf("/"))) - 1,
         1).get(Calendar.MONTH)))
    ) : ""
  )
) : "" )]]></textFieldExpression>
				</textField>
			</band>
		</detail>
		<columnFooter>
			<band height="0"  isSplitAllowed="true" >
			</band>
		</columnFooter>
		<pageFooter>
			<band height="0"  isSplitAllowed="true" >
			</band>
		</pageFooter>
		<summary>
			<band height="0"  isSplitAllowed="true" >
			</band>
		</summary>
</jasperReport>
