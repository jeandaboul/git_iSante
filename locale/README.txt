
OVERVIEW

This directory contains data and scripts needed for GNU gettext localization. 

For the purposes of iSanté the way this works is you give a French UTF-8 encoded string and it will either output the French string if no translation is available or it will output the translated string for the current language.

To use gettext you just need to call require_once('backend/config.php') and pass your string through the underscore function in PHP. The string must not have any $ variables or be a concatenation of multiple strings. You must only use one single quoted string literal. Here is an example

_('Fièvre ≥ 2 semaines')

You can also do something similar in Javascript generated by a php file.

<?= _('Fièvre ≥ 2 semaines') ?>

Once you've done this you must run `make all-force` from from this directory. What this command does is scan through all the .php files and finds all the _() function calls. It takes the strings and builds up files named like locale/*/LC_MESSAGES/*.mo which are used when the application is actually running. Unless this command is run then PHP will output the exact string that was given to _().

`make all-force` is an interactive process. When an untranslated string is encountered a prompt asking for a translation will appear. The prompt will include a line that specifies what the source language of the string was and what the language of the translation should be. For example 'fr -> en' means the source language is in French and the translation should be English. 

It is possible to add new languages by creating a new directory named like */LC_MESSAGES and copying ref.pot to */LC_MESSAGES/messages.po. After that just rerun `make locale`.

FILES

Here is an explanation of files in this directory.

*/LC_MESSAGES/messages.po - Translation file for * locale. New strings are automatically added to this file with Google Translate translations. Edit this file if the translations are incorrect and rerun `make locale`.
*/LC_MESSAGES/messages.mo - automatically generated binary version of messages.po
Makefile - make file for handling `make locale`
msgfilter.pl - very similar to gettext's msgfilter but works with UTF-8 message ids.
README.txt - this readme
ref.pot - automatically generated template file that contains all message ids found in the .php files
translate.pl - script that can be used with msgfilter.pl to generate Google Translate translations

GENERAL DOs AND DON'Ts

* Do not use the \ character in translated strings. 

* Do only pass one single quoted string literal to the underscore function. 

* Do not use double quoted strings, string operations or functions calls as the parameter for the underscore function.

* Avoid using markup and formatting in localized strings. Markup and formatting make it harder for the translator to translate the string. Strings automatically translated by the Google Translate API are particularly sensitive to this. 

* Do not use apostrophes or double quote characters in localized strings. These characters can cause problems with Google Translate and they tend to wreak havoc when strings are used in generated Javascript. Instead of these use the unicode right single quote (’) and right double quotation mark (”) characters.

* Avoid updating the locale files with `make locale` unless you will be checking in the output immediately afterwards. Otherwise you will have to contend with conflicts if someone else checks in updates before you. 

TROUBLESHOOTING

If you are not seeing your strings being translated then try the following. 

* Make sure your script is including backend/config.php. This file setups the environment and file paths for gettext.

* Restart the web server. It is sometimes possible for cached versions of the translation files to not get picked up on change. Restarting the web server will force the new files to be used. 

* Make sure we have paid to use the Google Translate API. Starting in December 2011 the Google Translate API is a pay service. The fee is $20/million characters. 
